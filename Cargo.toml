[workspace]
resolver = "2"
members = [
    "cli/*",
    "crates/*",

    # DENO
    "deno/ext/broadcast_channel",
    "deno/ext/cache",
    "deno/ext/canvas",
    "deno/ext/console",
    "deno/ext/cron",
    "deno/ext/crypto",
    "deno/ext/fetch",
    "deno/ext/ffi",
    "deno/ext/fs",
    "deno/ext/http",
    "deno/ext/io",
    "deno/ext/kv",
    "deno/ext/napi",
    "deno/ext/napi/sym",
    "deno/ext/net",
    "deno/ext/node",
    "deno/ext/rt_helper",
    "deno/ext/telemetry",
    "deno/ext/url",
    "deno/ext/web",
    "deno/ext/webgpu",
    "deno/ext/webidl",
    "deno/ext/websocket",
    "deno/ext/webstorage",
    "deno/resolvers/deno",
    "deno/resolvers/node",
    "deno/resolvers/npm_cache",
    "deno/runtime",
    "deno/runtime/features",
    "deno/runtime/permissions",
    "deno/runtime/subprocess_windows",

    "deno/bench_util",
    "deno/tests",
    "deno/tests/ffi",
    "deno/tests/napi",
    "deno/tests/sqlite_extension_test",
    "deno/tests/util/server",
]
# default-members = ["cli/omni"]

[workspace.package]
homepage = "https://github.com/omni-build/omni"
license = "MIT"
repository = "https://github.com/omni-build/omni"
keywords = ["build", "build-system", "build-tools", "cli", "omni", "devops"]
readme = "README.md"
documentation = "https://docs.rs/omni"
description = "A build system for the modern age"
categories = [
    "command-line-utilities",
    "development-tools",
    "development-tools::build-utils",
]
rust-version = "1.87.0"
edition = "2021"
version = "0.0.0-semantically-released"
authors = ["Clarence Manuel <rencedm112@gmail.com>"]


[workspace.dependencies]
serde = { version = "^1.0.219", features = ["derive", "rc", "alloc"] }
serde_json = "^1.0.140"
tracing = "^0.1.41"
tracing-subscriber = "^0.3.19"
thiserror = "^2.0.12"
eyre = "^0.6.12"
time = { version = "^0.3.41", features = [] }
derive_more = { version = "^2.0.1", features = ["full"] }
strum = { version = "^0.27.1", features = ["derive"] }
tokio = { version = "^1.45.0", features = [
    "rt",
    "rt-multi-thread",
    "tracing",
    "sync",
    "fs",
    "net",
    "socket2",
    "time",
    "macros",
] }
itertools = { version = "^0.14.0" }
rayon = { version = "^1.10.0" }
reqwest = { version = "^0.12.15", features = [
    "charset",
    "blocking",
    "rustls-tls",
    "http2",
], default-features = false }
deno_core = { version = "^0.350.0" }
#oxc = { version = "*", features = ["full"] }
clap = { version = "^4.5.38", features = ["derive", "env"] }
clap_complete = { version = "^4.5.50" }
globset = { version = "^0.4" }
shadow-rs = { version = "^1.1.1", default-features = false }
convert_case = { version = "^0.8.0" }
schemars = { version = "^0.9.0" }
walkdir = { version = "^2.5.0" }
serde_yml = { version = "^0.0.12" }
ignore = { version = "^0.4.23" }
regex = { version = "^1.11.1" }
env = { path = "./crates/env" }
env_loader = { path = "./crates/env_loader" }
petgraph = { version = "^0.8.1" }
omni_core = { path = "./crates/omni_core" }
config_utils = { path = "./crates/config_utils" }
js_executor = { path = "./crates/js_executor" }
toml = { version = "^0.8.22" }


###############################################################
# These following dependencies are added to support deno code
###############################################################

uuid = { version = "^1.17.0", features = ["v4"] }
chrono = { version = "^0.4.41", default-features = false, features = [
    "std",
    "serde",
] }
futures = { version = "^0.3.31" }

# byte level utils
bytes = { version = "^1.10.1" }
bytemuck = { version = "^1.23.0" }

# terminal and CLI
console_static_text = { version = "^0.8.3" }
termcolor = { version = "^1.4.1" }
color-print = { version = "^0.3.7" }
rustyline = { version = "^13.0.0" }

# encoding
base64 = { version = "^0.22.1" }
base64-simd = { version = "^0.8.0" }
base32 = { version = "^0.5.1" }
data-encoding = { version = "^2.9.0" }
encoding_rs = { version = "^0.8.35" }
data-url = { version = "^0.3.1" }

web-transport-proto = { version = "^0.2.6" }
#rustls-webpki = { version = "^0.103.3" }
rustls-webpki = { version = "^0.102" }
rustls-pemfile = { version = "^2.2.0" }
rustls-tokio-stream = { version = "^0.6.0" }
rustls = { version = "^0.23.27", default-features = false }

# logging
log = { version = "^0.4.20", features = ["kv"] }
opentelemetry = { version = "^0.27.0" }
opentelemetry-http = { version = "^0.27.0" }
opentelemetry-otlp = { version = "^0.27.0", features = [
    "logs",
    "http-proto",
    "http-json",
    "populate-logs-event-name",
] }
opentelemetry-semantic-conventions = { version = "^0.27.0", features = [
    "semconv_experimental",
] }
opentelemetry_sdk = { version = "^0.27.0", features = ["rt-tokio", "trace"] }

anyhow = { version = "1.0.57" }

# database
# pin to 0.34.0 for deno
rusqlite = { version = "^0.34.0", features = [
    "unlock_notify",
    "bundled",
    "session",
    "modern_sqlite",
    "limits",
] } # "modern_sqlite": need sqlite >= 3.49.0 for some db configs

spki = { version = "^0.7.3" }
slab = { version = "^0.4.9" }

# async utils
tokio-util = { version = "^0.7.15" }
tokio-rustls = { version = "^0.26.2", default-features = false }
tokio-socks = { version = "^0.5.2" }
tokio-vsock = { version = "^0.7.1" }
tokio-eld = { version = "^0.2.0" }
tokio-metrics = { version = "^0.4.2" }
async-trait = { version = "^0.1.88" }
async-compression = { version = "^0.4.23" }
async-stream = { version = "^0.3.6" }

# image and color utils
image = { version = "^0.25.6", default-features = false }
faster-hex = { version = "^0.10.0" }
lcms2 = { version = "^6.1.0" }

# number utils
num-traits = { version = "^0.2.19" }
num-bigint = { version = "^0.4.6" }
num-bigint-dig = { version = "^0.8.4" }
num-integer = { version = "^0.1.46" }

saffron = { version = "^0.1.0" }
flate2 = { version = "^1.1.1", default-features = false }
capacity_builder = { version = "^0.5.0" }
fqdn = { version = "^0.4.6" }
libc = { version = "^0.2.172" }
percent-encoding = { version = "^2.3.1" }
which = { version = "^7.0.3" }
dyn-clone = { version = "^1.0.19" }
error_reporter = { version = "^1.0.0" }
rand = { version = "^0.8.5" }
ring = { version = "^0.17.14" }

# format serialization and deserialization
serde_bytes = { version = "^0.11.17" }
serde-value = { version = "^0.7.0" }
simd-json = { version = "^0.15.1" }
jsonc-parser = { version = "^0.26.2" }
prost = { version = "^0.13.5" }
prost-build = { version = "^0.13.5" }

# LSP
lsp-types = { version = "^0.97.0" }

bencher = { version = "^0.1.5" }
cache_control = { version = "^0.2.0" }
const-oid = { version = "^0.9.5" }
cranelift-native = { version = "^0.120.0" }
cranelift = { version = "^0.120.0" }
path-clean = { version = "^1.0.1" }
pretty_assertions = { version = "^1.4.1" }

# OS API access
sys_traits = { version = "^0.1.11" }
os_pipe = { version = "^1.2.2" }
nix = { version = "^0.27.1" }

# cryptography, hashing, keys, signatures, certificates
rsa = { version = "^0.9.8", default-features = false, features = [
    "std",
    "pem",
    "hazmat",
] }
cbc = { version = "^0.1.2", features = ["alloc"] }
ctr = { version = "^0.9.2" }
#webpki-roots = { version = "^1.0.0" }
#webpki-root-certs = { version = "^1.0.0" }
webpki-root-certs = { version = "0.26.5" }
webpki-roots = { version = "0.26" }
x509-parser = { version = "^0.17.0" }
digest = { version = "^0.10.7" }
dsa = { version = "^0.6.3" }
ecb = { version = "^0.1.2" }
sec1 = { version = "^0.7.3" }
ed25519-dalek = { version = "^2.1.1" }
hkdf = { version = "^0.12.4" }
k256 = { version = "^0.13.4" }
md-5 = { version = "^0.10.6" }
md4 = { version = "^0.10.2" }
sha1 = { version = "^0.10.6", features = ["oid"] }
sha2 = { version = "^0.10.9", features = ["oid"] }
sha3 = { version = "^0.10.8" }
sm3 = { version = "^0.4.2" }
signature = { version = "^2.2.0" }
ripemd = { version = "^0.1.3" }
blake2 = { version = "^0.10.6" }
twox-hash = { version = "^2.1.0" }
pbkdf2 = { version = "^0.12.2" }
pkcs8 = { version = "^0.10.2" }
scrypt = { version = "^0.11.0" }
p224 = { version = "^0.13.2", features = ["ecdh"] }
p256 = { version = "^0.13.2", features = ["ecdh", "jwk"] }
p384 = { version = "^0.13.1", features = ["ecdh", "jwk"] }
p521 = { version = "^0.13.3" }
aes = { version = "^0.8.3" }
aes-kw = { version = "^0.2.1" }
aes-gcm = { version = "^0.10.3" }
aead-gcm-stream = { version = "^0.4.0" }
curve25519-dalek = { version = "^4.1.3" }
ecdsa = { version = "^0.16.9" }
ed448-goldilocks = { version = "^0.9.0" }
elliptic-curve = { version = "^0.13.8" }
x25519-dalek = { version = "^2.0.1" }

# webgpu
raw-window-handle = { version = "^0.6.2" }
wgpu-core = { version = "^24.0.5" }
wgpu-types = { version = "^24.0.0" }

# compression
libz-sys = { version = "^1.1.22", default-features = false }
tar = { version = "^0.4.44" }
brotli = { version = "^6.0.0" }

# networking
fast-socks5 = { version = "^0.10.0" }
socket2 = { version = "^0.5.9" }
idna = { version = "^1.0.3" }
ipnetwork = { version = "^0.21.1" }
netif = { version = "^0.1.6" }
url = { version = "^2.5.4" }
urlpattern = { version = "^0.3.0" }
ipnet = { version = "^2.11.0" }
zeromq = { version = "^0.4.1", default-features = false, features = [
    "tcp-transport",
    "tokio-runtime",
] }
hickory-client = { version = "0.25.0-alpha.4" }
hickory-resolver = { version = "0.25.0-alpha.4", features = [
    "tokio-runtime",
    "serde",
] }
hickory-proto = { version = "0.25.0-alpha.4" }
hickory-server = { version = "0.25.0-alpha.4" }

# napi
libloading = "^0.7"
libuv-sys-lite = "^1.48.2"
napi-build = "^1"
napi-sys = { version = "^2.4.0", default-features = false }

# file system
notify = { version = "^8.0.0" }
same-file = { version = "^1.0.6" }
tempfile = { version = "^3.20.0" }
fs3 = { version = "^0.5.0" }
filetime = { version = "^0.2.25" }

# http/web
h2 = { version = "^0.4.10" }
quinn = { version = "^0.11.8", default-features = false }
http = { version = "^1.3.1" }
http_v02 = { package = "http", version = "^0.2.9" }
httparse = { version = "^1.10.1" }
http-body = { version = "^1.0.1" }
http-body-util = { version = "^0.1.3" }
hyper = { version = "^1.6.0", features = ["full"] }
hyper_v014 = { package = "hyper", version = "^0.14.32", features = ["full"] }
hyper-rustls = { version = "0.27.2", default-features = false, features = [
    "http1",
    "http2",
    "tls12",
    "ring",
] }
hyper-util = { version = "0.1.10", features = [
    "tokio",
    "client",
    "client-legacy",
    "server",
    "server-auto",
] }
fastwebsockets = { version = "^0.10.0", features = [
    "upgrade",
    "unstable-split",
] }
import_map = { version = "^0.22.0", features = ["ext"] }

# tower
tower = { version = "^0.5.2", default-features = false, features = [
    "retry",
    "util",
] }
tower-http = { version = "^0.6.4", features = [
    "decompression-br",
    "decompression-gzip",
] }
tower-service = { version = "^0.3.3" }
tower-lsp = { package = "deno_tower_lsp", version = "=0.4.3", features = [
    "proposed",
] }

# env 
dotenvy = { version = "^0.15.7" }

dlopen2 = { version = "^0.7.0" }
libffi-sys = { version = "^3.3.1" }
libffi = { version = "^4.1.0" }
memmap2 = { version = "^0.9.5" }
memchr = { version = "^2.7.4" }
mime = { version = "^0.3.17" }
phf = { version = "^0.11.3" }

# parsing, macro processing
quote = { version = "^1.0.40" }
syn = { version = "^2.0.101", features = ["full", "extra-traits"] }
der = { version = "^0.7.10" }
monch = { version = "^0.5.0" }

# locking and synchronization
parking_lot = { version = "^0.12.3" }
once_cell = { version = "^1.21.3" }
async-once-cell = { version = "^0.5.4" }

# string processing
lazy-regex = { version = "^3.4.1" }
glob = { version = "^0.3.2" }

# versioning
semver = { version = "^1.0.26" }

# rust utilities
pin-project = { version = "^1.1.10" }
pin-project-lite = { version = "^0.2.16" }
yoke = { version = "^0.8.0" }
scopeguard = { version = "^1.2.0" }
boxed_error = { version = "^0.2.3" }

# data structures
dashmap = { version = "^6.1.0" }
smallvec = { version = "^1.15.0" }
indexmap = { version = "^2.9.0" }


# DENO
temp_deno_which = { version = "0.1.0", default-features = false }
dissimilar = { version = "^1.0.10" }
deno_ast = { version = "^0.48.0", features = ["transpiling"] }
deno_cache_dir = "^0.22.1"
deno_config = { version = "^0.56.0", features = ["workspace"] }
deno_doc = "^0.177.0"
deno_error = "^0.6.1"
deno_graph = { version = "^0.94.2", default-features = false }
deno_lint = "^0.76.0"
deno_lockfile = "^0.30.1"
deno_media_type = { version = "^0.2.8", features = ["module_specifier"] }
deno_native_certs = "^0.3.0"
deno_npm = "^0.35.0"
deno_package_json = { version = "^0.7.0", default-features = false }
deno_path_util = "^0.4.0"
deno_semver = "^0.8.0"
deno_task_shell = "^0.24.0"
deno_terminal = "^0.2.2"
deno_unsync = "^0.4.2"
deno_whoami = "^0.1.0"

denokv_proto = "^0.11.0"
denokv_remote = "^0.11.0"
# denokv_sqlite brings in bundled sqlite if we don't disable the default features
denokv_sqlite = { default-features = false, version = "^0.11.0" }

# exts
deno_broadcast_channel = { path = "./deno/ext/broadcast_channel" }
deno_cache = { path = "./deno/ext/cache" }
deno_canvas = { path = "./deno/ext/canvas" }
deno_console = { path = "./deno/ext/console" }
deno_cron = { path = "./deno/ext/cron" }
deno_crypto = { path = "./deno/ext/crypto" }
deno_fetch = { path = "./deno/ext/fetch" }
deno_ffi = { path = "./deno/ext/ffi" }
deno_fs = { path = "./deno/ext/fs" }
deno_http = { path = "./deno/ext/http" }
deno_io = { path = "./deno/ext/io" }
deno_kv = { path = "./deno/ext/kv" }
deno_napi = { path = "./deno/ext/napi" }
deno_net = { path = "./deno/ext/net" }
deno_node = { path = "./deno/ext/node" }
deno_os = { path = "./deno/ext/os" }
deno_process = { path = "./deno/ext/process" }
deno_telemetry = { path = "./deno/ext/telemetry" }
deno_tls = { path = "./deno/ext/tls" }
deno_url = { path = "./deno/ext/url" }
deno_web = { path = "./deno/ext/web" }
deno_webgpu = { path = "./deno/ext/webgpu" }
deno_webidl = { path = "./deno/ext/webidl" }
deno_websocket = { path = "./deno/ext/websocket" }
deno_webstorage = { path = "./deno/ext/webstorage" }
denort_helper = { path = "./deno/ext/rt_helper" }

# workspace libraries
deno_bench_util = { path = "./deno/bench_util" }
deno_features = { path = "./deno/runtime/features" }
deno_lib = { path = "./deno/cli/lib" }
deno_npm_cache = { path = "./deno/resolvers/npm_cache" }
node_resolver = { path = "./deno/resolvers/node" }
deno_resolver = { path = "./deno/resolvers/deno" }
deno_permissions = { path = "./deno/runtime/permissions" }
deno_runtime = { path = "./deno/runtime" }
deno_snapshots = { path = "./deno/cli/snapshot" }
deno_subprocess_windows = { path = "./deno/runtime/subprocess_windows" }
napi_sym = { path = "./deno/ext/napi/sym" }
test_util = { package = "test_server", path = "./deno/tests/util/server" }

# testing/benchmarking
file_test_runner = { version = "^0.7.3" }
flaky_test = { version = "^0.2.2" }
ntest_timeout = { version = "0.9.3" }

# windows specific
junction = { version = "^1.2.0" }
winapi = { version = "^0.3.9", default-features = false }
windows-sys = { version = "^0.59.0", features = [
    "Win32_Foundation",
    "Win32_Media",
    "Win32_Storage_FileSystem",
    "Win32_System_IO",
    "Win32_System_WindowsProgramming",
    "Wdk",
    "Wdk_System",
    "Wdk_System_SystemInformation",
    "Win32_Security",
    "Win32_System_Pipes",
    "Wdk_Storage_FileSystem",
    "Win32_System_Registry",
    "Win32_System_Kernel",
    "Win32_System_Threading",
    "Win32_UI",
    "Win32_UI_Shell",
] }
win32job = { version = "^2.0.3" }
winres = { version = "^0.1.12" }


[profile.release]
incremental = true
opt-level = 3       # optimize for speed but increase binary size
codegen-units = 1   # less parallel compilation but more optimization can be done
lto = true          # can perform faster but slower compilation
strip = "debuginfo" # strip debug info from binary to reduce binary size
#debug = false
debug = "line-tables-only"
debug-assertions = false
overflow-checks = false
split-debuginfo = "packed"

# Build release with debug symbols: cargo build --profile=release-with-debug
[profile.release-with-debug]
inherits = "release"
debug = true

# Faster to compile than `release` but with similar performance.
[profile.release-lite]
inherits = "release"
codegen-units = 128
lto = "thin"

# Key generation is too slow on `debug`
[profile.dev.package.num-bigint-dig]
opt-level = 3

# rusty-v8 needs at least -O1 to not miscompile
[profile.dev.package.v8]
opt-level = 1

[profile.release.package.async-compression]
opt-level = 3
[profile.release.package.base64-simd]
opt-level = 3
[profile.release.package.brotli]
opt-level = 3
[profile.release.package.brotli-decompressor]
opt-level = 3
[profile.release.package.bytes]
opt-level = 3
[profile.release.package.deno_bench_util]
opt-level = 3
[profile.release.package.deno_broadcast_channel]
opt-level = 3
[profile.release.package.deno_core]
opt-level = 3
[profile.release.package.deno_crypto]
opt-level = 3
[profile.release.package.deno_fetch]
opt-level = 3
[profile.release.package.deno_ffi]
opt-level = 3
[profile.release.package.deno_http]
opt-level = 3
[profile.release.package.deno_napi]
opt-level = 3
[profile.release.package.deno_net]
opt-level = 3
[profile.release.package.deno_node]
opt-level = 3
[profile.release.package.deno_runtime]
opt-level = 3
[profile.release.package.deno_tls]
opt-level = 3
[profile.release.package.deno_url]
opt-level = 3
[profile.release.package.deno_web]
opt-level = 3
[profile.release.package.deno_websocket]
opt-level = 3
[profile.release.package.fastwebsockets]
opt-level = 3
[profile.release.package.flate2]
opt-level = 3
[profile.release.package.futures-util]
opt-level = 3
[profile.release.package.futures-io]
opt-level = 3
[profile.release.package.futures-channel]
opt-level = 3
[profile.release.package.futures-sink]
opt-level = 3
[profile.release.package.futures-task]
opt-level = 3
[profile.release.package.futures-core]
opt-level = 3
[profile.release.package.hyper]
opt-level = 3
[profile.release.package.miniz_oxide]
opt-level = 3
[profile.release.package.num-bigint-dig]
opt-level = 3
[profile.release.package.rand]
opt-level = 3
[profile.release.package.serde]
opt-level = 3
[profile.release.package.serde_v8]
opt-level = 3
[profile.release.package.libsui]
opt-level = 3
[profile.release.package.test_napi]
opt-level = 3
[profile.release.package.tokio]
opt-level = 3
[profile.release.package.url]
opt-level = 3
[profile.release.package.v8]
opt-level = 3
[profile.release.package.zstd]
opt-level = 3
[profile.release.package.zstd-sys]
opt-level = 3
[profile.release.package.http]
opt-level = 3
[profile.release.package.http-body]
opt-level = 3
[profile.release.package.httparse]
opt-level = 3
[profile.release.package.mio]
opt-level = 3
[profile.release.package.fnv]
opt-level = 3
[profile.release.package.hyper-util]
opt-level = 3
[profile.release.package.httpdate]
opt-level = 3
[profile.release.package.deno_unsync]
opt-level = 3
[profile.release.package.deno_semver]
opt-level = 3
[profile.release.package.deno_npm]
opt-level = 3
[profile.release.package.deno_lockfile]
opt-level = 3
[profile.release.package.deno_npm_cache]
opt-level = 3
